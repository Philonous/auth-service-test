image: nejla/haskell-build

stages:
  - build
  - build-images
  - test

variables:
  stack_args: --no-docker
  TAG: $CI_COMMIT_SHA
  REGISTRY: registry.nejla.com/nejla-ab/auth-service
  APP_TEST_BASEIMAGE_NAME: baseimage
  APP_IMAGE: auth-service
  WEB_IMAGE: auth-web
  BASE_IMAGE: baseimage

build:
  stage: build
  before_script:
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$AUTHSERVICE_SSH_PRIVKEY")
    - mkdir -p ~/.ssh
    - grep "git.nejla.com" ~/.ssh/known_hosts >/dev/null
      || (echo "$NEJLA_GIT_HOSTKEY" >> ~/.ssh/known_hosts)
    - mkdir -p $PWD/.stack-cache
    - '[[ -d $HOME/.stack ]] || ln -s $PWD/.stack-cache $HOME/.stack'
    - scripts/registry-login
  script:
    - make -C service dist/auth-service
  artifacts:
    paths:
      - service/dist
      - dist/doc
  cache:
    paths:
      - '.stack-cache'
      - 'service/.stack-work'
    key: "auth-service"

build-auth-web-image:
  stage: build-images
  variables:
    TARGET: $REGISTRY/$WEB_IMAGE:$CI_COMMIT_SHA
    EXTRA_TARGET: $REGISTRY/$WEB_IMAGE:latest
  image:
    # The debug image contains the shell needed by gitlab-ci, resetting the
    # entrypoint makes it available as a command
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"registry.nejla.com\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" \
      > /kaniko/.docker/config.json
  script:
    - if [ $CI_COMMIT_BRANCH = "master" ]; then EXTRA_ARGS="--destination $EXTRA_TARGET"; fi
    - 'echo "Building with --destination \"$TARGET\" $EXTRA_ARGS'
    - /kaniko/executor --context $CI_PROJECT_DIR/web
                       --dockerfile $CI_PROJECT_DIR/web/Dockerfile
                       --cache=true
                       --destination "$TARGET"
                       $EXTRA_ARGS
    - 'echo "Built: $TARGET"'

build-auth-service-baseimage:
  stage: build-images
  variables:
    TARGET: $REGISTRY/$BASE_IMAGE:$CI_COMMIT_SHA
  image:
    # The debug image contains the shell needed by gitlab-ci, resetting the
    # entrypoint makes it available as a command
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"registry.nejla.com\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" \
      > /kaniko/.docker/config.json
  script:
    - 'echo "Building: $TARGET"'
    - /kaniko/executor --context $CI_PROJECT_DIR/service
                       --dockerfile $CI_PROJECT_DIR/service/Dockerfile
                       --cache=true
                       --destination "$TARGET"
    - 'echo "Built: TARGET"'
  dependencies:
    - build


build-auth-service-image:
  stage: build-images
  variables:
    TARGET: $REGISTRY/$BASE_IMAGE:$CI_COMMIT_SHA
    EXTRA_TARGET: $REGISTRY/$WEB_IMAGE:latest
  image:
    # The debug image contains the shell needed by gitlab-ci, resetting the
    # entrypoint makes it available as a command
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"registry.nejla.com\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" \
      > /kaniko/.docker/config.json
  script:
    - if [ $CI_COMMIT_BRANCH = "master" ]; then EXTRA_ARGS="--destination $EXTRA_TARGET"; fi
    - 'echo "Building with --destination \"$TARGET\" $EXTRA_ARGS'
    - /kaniko/executor --context $CI_PROJECT_DIR/service
                       --dockerfile $CI_PROJECT_DIR/service/Dockerfile
                       --cache=true
                       --destination "$TARGET"
                       $EXTRA_ARGS
    - 'echo "Built: $TARGET"'
  dependencies:
    - build


test-backend:
  stage: test
  variables:
    POSTGRES_HOST_AUTH_METHOD: trust
    DB_HOST: database
  services:
    - name: postgres:10.13
      alias: database
    - name: mailhog/mailhog:latest
      alias: mailhog
  image: $REGISTRY/baseimage:$CI_COMMIT_SHA
  dependencies:
    - build
  script:
    - for t in service/dist/tests/*; do echo "Runing $t"; $t; done
