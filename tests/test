#!/bin/sh

set -e

if [[ -n $DEBUG ]]; then
  set -x
  CURL="curl -v"
else
  CURL="curl --silent"
fi


# You need to have jq in path

AUTHSERVICE_CONTAINER=authservice_auth-service_1
DB_HOST=database
DB_USER=postgres
DB_DATABASE=postgres
DOCKER_HOST=localhost:8000
API=$DOCKER_HOST/api
USER=no@spam.please
PASSWORD=pwd123
USER2=no2@spam.please
PASSWORD2=pwd1234
NAME="JohnDoe"
INSTANCE="de305d54-75b4-431b-adb2-eb6b9e546014"

NOTINSTANCE="deadbeef-75b4-431b-adb2-eb6b9e546014"

authservice () {
   docker exec $AUTHSERVICE_CONTAINER auth-service $@
}

db () {
    docker exec \
           -i $AUTHSERVICE_CONTAINER psql \
           -h $DB_HOST \
           -U $DB_USER \
           $DB_DATABASE $@
}

run_db () {
    docker exec \
           -it $AUTHSERVICE_CONTAINER psql \
           -h $DB_HOST \
           -U $DB_USER \
           $DB_DATABASE $@
}


docker_setup () {
    db > /dev/null <<EOF
DROP SCHEMA public CASCADE;
CREATE SCHEMA public
  AUTHORIZATION postgres;

GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO public;
COMMENT ON SCHEMA public
  IS 'standard public schema';
EOF
    authservice adduser "$USER" "$PASSWORD" "$NAME"
    authservice adduser "$USER2" "$PASSWORD2" "$NAME" "12345"

    db > /dev/null <<EOF
INSERT INTO "instance" VALUES ('${INSTANCE}', 'instance1');
INSERT INTO "user_instance" VALUES ( (SELECT "uuid" FROM "user" WHERE "email" = '${USER}')
                                   , (SELECT "uuid" FROM "instance" WHERE "name"='instance1'));
EOF
}

get_otp () {
OTP=$(db -qtA <<EOF
SELECT password FROM user_otp
  ORDER BY created DESC
  LIMIT 1
EOF
   )
}

start () {
    cabal run -- run
}


nginx_logs () {
    docker exec authservice_upstream_1 cat /tmp/nginx.log
}

enter_nginx() {
    docker exec -it authservice_upstream_1 /bin/bash
}


create_otp() {
    echo "Creating OTP"
    if [[ -z $1 ]]; then
      LOGIN_USER=$USER
    else
        LOGIN_USER=$1
    fi
    if [[ -z $2 ]]; then
      LOGIN_PASSWORD=$PASSWORD
    else
        LOGIN_PASSWORD=$2
    fi
    RES=$($CURL -H "Content-Type: application/json" \
                -d "{ \"user\": \"$LOGIN_USER\", \"password\": \"$LOGIN_PASSWORD\" }" \
                http://$API/login)
    if [[ ! $RES == '{"error":"One time password required"}' ]]; then
      echo "Could not create OTP: $RES"
      exit 1
    fi
}

login() {
    echo "logging in"
    if [[ -z $1 ]]; then
      LOGIN_USER=$USER
    else
        LOGIN_USER=$1
    fi
    if [[ -z $2 ]]; then
      LOGIN_PASSWORD=$PASSWORD
    else
        LOGIN_PASSWORD=$2
    fi
    if [[ -z $3 ]]; then
      LOGIN_STRING="{ \"user\": \"$LOGIN_USER\", \"password\": \"$LOGIN_PASSWORD\" }"
    else
        LOGIN_STRING="{ \"user\": \"$LOGIN_USER\", \"password\": \"$LOGIN_PASSWORD\", \"otp\":\"$3\" }"
    fi

    RES=$($CURL -H "Content-Type: application/json" \
                -d "$LOGIN_STRING" \
                http://$API/login)

    TOKEN=$(echo "$RES" | jq -r '.token.token')
    echo "Got token: $TOKEN"
    if [[ -z "$TOKEN" ]]; then
       echo "Could not login: $RES"
       exit 1
    fi
}

# run _local_ test
runtest() {
    RES="$(login)"
    echo $RES
    TOKEN=$(echo "$RES" | jq -r '.token.token')
    if [[ -z "$TOKEN" ]]; then
       echo "Could not login"
       exit 1
    fi
    RES=$($CURL http://$HOST/check-token/$INSTANCE/$TOKEN)
    echo $RES
}

docker_test() {
    echo "Running setup"
    docker_setup
    echo "Trying to log in"
    login
    echo "Checking token"
    RES=$($CURL -o /dev/null \
                --write-out %{http_code}\
                -H "X-Token: $TOKEN" \
                http://$API/check-token)
    if [[ $RES != "200" ]]; then
      echo "Could not verify token got $RES"
      exit 1
    fi
    echo "Trying to reach upstream resource"
    RES=$($CURL -H "X-Instance: $INSTANCE" \
                -H "X-Token: $TOKEN" \
                http://$API/foo/index.html)
    if [[ $RES != "foo!" ]]; then
      echo "Could not retrieve foo.html, got $RES insted"
      exit 1
    fi
    echo "Upstream says:" $RES

    echo "Trying to reach upstream resource without token"
    RES=$($CURL -o /dev/null \
                -w %{http_code} \
                -H "X-Instance: $INSTANCE" \
                http://$API/index.htm)
    if [[ $RES != "403" ]]; then
      echo "Did not get authorization denied, instead got $RES"
      exit 1
    fi

    echo "Trying to reach upstream resource with bogus token"
    RES=$($CURL -o /dev/null \
                -w %{http_code} \
                -H "X-Instance: $INSTANCE" \
                -H "X-Token: bogus$TOKEN" \
                http://$API/index.htm)
    if [[ $RES != "403" ]]; then
      echo "Did not get authorization denied, instead got $RES"
      exit 1
    fi

    echo "Trying / without a token"
    RES=$($CURL http://$DOCKER_HOST/
       )
    if [[ $RES != "Authenticate!" ]]; then
      echo "Did not get redirect , instead got $RES"
      exit 1
    fi

    echo "Trying /auth.html"
    RES=$($CURL http://$DOCKER_HOST/auth.html)
    if [[ $RES != "Authenticate!" ]]; then
      echo "Did not get auth.html, instead got $RES"
      exit 1
    else
      echo "Got /auth.html"
    fi

    echo "Trying /auth.html with token"
    RES=$($CURL -o /dev/null \
                -w %{http_code} \
                -H "X-Instance: $INSTANCE" \
                --cookie "token=$TOKEN" \
                http://$DOCKER_HOST/auth.html)
    if [[ $RES != "303" ]]; then
      echo "Did not get redirect, instead got $RES"
      exit 1
    else
      echo "Got redirect"
    fi

    echo "Trying to get user info"
    RES=$($CURL --cookie "token=$TOKEN" \
                http://$API/user-info)
    if [[ $(echo "$RES" | jq -r '.email') != "no@spam.please" ]]; then
      echo "Could not get user info"
      exit 1
    fi
    echo "Got user info"

    echo "Getting header info"
    RES=$($CURL -I \
                --cookie "token=$TOKEN" \
                -H "X-Instance: $INSTANCE" \
                http://$DOCKER_HOST/index.html
       )
    ETAG=$(echo "$RES" | tr -d '\r' | awk 'BEGIN {FS=": "}/^ETag/{print $2}')
    LASTMOD=$(echo "$RES" \
                   | tr -d '\r' \
                   | awk 'BEGIN {FS=": "}/^Last-Modified/{print $2}'
           )
    if [[ -z $ETAG ]]; then
      echo "No ETag received"
      exit 1
    fi
    if [[ -z $LASTMOD ]]; then
      echo "No Last-Modified received"
      exit 1
    fi

    echo "Trying If-Modified-Since"
    RES=$($CURL --cookie "token=$TOKEN" \
                -H "X-Instance: $INSTANCE" \
                -H "If-Modified-Since: $LASTMOD" \
                -o /dev/null \
                -w %{http_code} \
                http://$DOCKER_HOST/index.html
       )
    if [[ $RES != "304" ]]; then
      echo "If-Modified-Since did not result in 304, got $RES instead"
      exit 1
    fi

    echo "Trying If-None-Match"
    RES=$($CURL --cookie "token=$TOKEN" \
                -H "X-Instance: $INSTANCE" \
                -H "If-None-Match: $ETAG" \
                -o /dev/null \
                -w %{http_code} \
                http://$DOCKER_HOST/index.html
       )
    if [[ $RES != "304" ]]; then
      echo "If-None-Match did not result in 304, got $RES instead"
      exit 1
    fi

    echo "Trying If-None-Match with non-matching ETag"
    RES=$($CURL --cookie "token=$TOKEN" \
                -H "X-Instance: $INSTANCE" \
                -H "If-None-Match: \"bogus\"" \
                -o /dev/null \
                -w %{http_code} \
                http://$DOCKER_HOST/index.html
       )
    if [[ $RES != "200" ]]; then
      echo "If-None-Match did not result in 304, got $RES instead"
      exit 1
    fi

    echo "Trying If-Modified-Since + If-None-Match"
    RES=$($CURL -H "X-Instance: $INSTANCE" \
                --cookie "token=$TOKEN" \
                -H "If-Modified-Since: $LASTMOD" \
                -H "If-None-Match: $ETAG" \
                -o /dev/null \
                -w %{http_code} \
                http://$DOCKER_HOST/index.html
       )
    if [[ $RES != "304" ]]; then
      echo "If-Modified-Since + If-None-Match did not result in 304, got $RES instead"
      exit 1
    fi

    echo "Trying If-Modified-Since + If-None-Match without token"
    RES=$($CURL -I "X-Instance: $INSTANCE" \
                http://$DOCKER_HOST/index.html)

    ETAG=$(echo "$RES" | tr -d '\r' | awk 'BEGIN {FS=": "}/^ETag/{print $2}')
    LASTMOD=$(echo "$RES" \
                   | tr -d '\r' \
                   | awk 'BEGIN {FS=": "}/^Last-Modified/{print $2}'
           )
    if [[ -z $ETAG ]]; then
      echo "No ETag received: \n$RES"
      exit 1
    fi
    if [[ -z $LASTMOD ]]; then
      echo "No Last-Modified received: \n$RES"
      exit 1
    fi

    RES=$($CURL -H "X-Instance: $INSTANCE" \
                -H "If-Modified-Since: $LASTMOD" \
                -H "If-None-Match: $ETAG" \
                -o /dev/null \
                -w %{http_code} \
                http://$DOCKER_HOST/index.html
       )
    if [[ $RES != "304" ]]; then
      echo "If-Modified-Since + If-None-Match did not result in 304, got $RES instead"
      exit 1
    fi

    echo "Trying index.html without instance"
    RES=$($CURL --cookie "token=$TOKEN" \
                -o /dev/null \
                -w %{http_code} \
                http://$DOCKER_HOST/index.html
       )
    if [[ $RES != "200" ]]; then
      echo "Could not get index.html without instance"
      exit 1
    fi

    echo "Trying index.html with wrong instance"
    RES=$($CURL -H "X-Instance: $NOTINSTANCE" \
                --cookie "token=$TOKEN" \
                -o /dev/null \
                -w %{http_code} \
                http://$API/index.html
       )
    if [[ $RES != "403" ]]; then
      echo "Did not get 403, got $RES instead"
      exit 1
    fi


    echo "Trying / without token (should fail)"
    RES=$($CURL http://$DOCKER_HOST/ )
    if [[ $RES != "Authenticate!" ]]; then
      echo "Did not receive Authenticate!, got $RES instead"
      exit 1
    fi

    echo "Trying /index.html without token (should fail)"
    RES=$($CURL http://$DOCKER_HOST/index.html )
    if [[ $RES != "Authenticate!" ]]; then
      echo "Did not receive Authenticate!, got $RES instead"
      exit 1
    fi

    echo "Trying /foo.html without token"
    RES=$($CURL http://$DOCKER_HOST/foo.html )
    if [[ $RES != "foo!" ]]; then
      echo "Did not receive foo!, got $RES instead"
      exit 1
    fi

    echo "Testing otp"
    create_otp $USER2 $PASSWORD2
    get_otp
    if [[ -z $OTP ]]; then
      echo "Could not get OTP"
    else
        echo "Got OTP: $OTP"
    fi
    OTP=$(echo $OTP | tr '[:upper:]' '[:lower:]')
    echo "trying OTP $OTP"
    login $USER2 $PASSWORD2 $OTP

}

docker_rebuild() {
    set -e
    docker-compose stop
    docker-compose rm -f
    docker-compose build
    docker-compose up
}

case $1 in
    dockertest)
        docker_test
        ;;
    docker)
        docker_rebuild
        ;;
    login)
        shift
        login $@
        ;;
    nginx_rebuild_conf)
        nginx_build_conf
        ;;
    nginx_logs)
        nginx_logs
        ;;
    nginx_enter)
        enter_nginx
        ;;
    foo)
        footest
        ;;
    db)
        run_db
        ;;
    *)
        echo "usage: test.sh dockertest|docker|login|nginx_rebuild_conf|nginx_logs|nginx_enter"
        exit 1
        ;;
esac
