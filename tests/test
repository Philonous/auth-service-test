#!/bin/sh

set -e

if [[ -n $DEBUG ]]; then
  set -x
  CURL="curl -v"
else
  CURL="curl --silent"
fi


# You need to have jq in path

export DB_HOST=database
export DB_USER=lambdatrade
export DB_DATABASE=lambdatrade

HOST=localhost:3000
DOCKER_HOST=localhost:8000
API=$DOCKER_HOST/api

# Make sure that this matches with setuptest.sh when running against docker
USER=no@spam.please
PASSWORD=pwd123
NAME="John Doe"
INSTANCE="de305d54-75b4-431b-adb2-eb6b9e546014"

db () {
    psql -h $DB_HOST -U $DB_USER $DB_DATABASE
}

start () {
    cabal run -- run
}


nginx_logs () {
    docker exec authservice_upstream_1 cat /tmp/nginx.log
}

enter_nginx() {
    docker exec -it authservice_upstream_1 /bin/bash
}


login() {
    echo "logging in"
    RES=$($CURL -H "Content-Type: application/json" \
                -d "{ \"user\": \"$USER\", \"password\": \"$PASSWORD\" }" \
                http://$1/login)
    TOKEN=$(echo "$RES" | jq -r '.token.token')
    echo "Got token: $TOKEN"
    if [[ -z "$TOKEN" ]]; then
       echo "Could not login"
       exit 1
    fi
}

# run _local_ test
runtest() {
    RES="$(login "$HOST")"
    echo $RES
    TOKEN=$(echo "$RES" | jq -r '.token.token')
    if [[ -z "$TOKEN" ]]; then
       echo "Could not login"
       exit 1
    fi
    RES=$($CURL http://$HOST/check-token/$INSTANCE/$TOKEN)
    echo $RES
}


docker_setup () {
    docker cp ./testsetup.sh authservice_auth-service_1:/testsetup.sh
    docker exec -it authservice_auth-service_1 /testsetup.sh > /dev/null
}


docker_test() {
    echo "Running setup"
    docker_setup
    echo "Trying to log in"
    login "$API"
    echo "Checking token"
    RES=$($CURL --write-out %{http_code}\
                -H "X-Token: $TOKEN" \
                http://$API/check-token)
    if [[ $RES != "204" ]]; then
      echo "Could not verify tokenm got $RES"
      exit 1
    fi
    echo "Trying to reach upstream resource"
    RES=$($CURL -H "X-Instance: $INSTANCE" \
                -H "X-Token: $TOKEN" \
                http://$API/foo/index.html)
    if [[ $RES != "foo!" ]]; then
      echo "Could not retrieve foo.html, got $RES insted"
      exit 1
    fi
    echo "Upstream says:" $RES

    echo "Trying to reach upstream resource without token"
    RES=$($CURL -o /dev/null \
                -w %{http_code} \
                -H "X-Instance: $INSTANCE" \
                http://$API/index.htm)
    if [[ $RES != "403" ]]; then
      echo "Did not get authorization denied, instead got $RES"
      exit 1
    fi

    echo "Trying to reach upstream resource with bogus token"
    RES=$($CURL -o /dev/null \
                -w %{http_code} \
                -H "X-Instance: $INSTANCE" \
                -H "X-Token: bogus$TOKEN" \
                http://$API/index.htm)
    if [[ $RES != "403" ]]; then
      echo "Did not get authorization denied, instead got $RES"
      exit 1
    fi

    echo "Trying /auth.html"
    RES=$($CURL http://$DOCKER_HOST/auth.html)
    if [[ $RES != "Authenticate!" ]]; then
      echo "Did not get auth.html, instead got $RES"
      exit 1
    else
      echo "Got /auth.html"
    fi

    echo "Trying /auth.html with token"
    RES=$($CURL -o /dev/null \
                -w %{http_code} \
                -H "X-Instance: $INSTANCE" \
                --cookie "token=$TOKEN" \
                http://$DOCKER_HOST/auth.html)
    if [[ $RES != "303" ]]; then
      echo "Did not get redirect, instead got $RES"
      exit 1
    else
      echo "Got redirect"
    fi

    echo "Trying to get user info"
    RES=$($CURL --cookie "token=$TOKEN" \
                http://$API/user-info)
    if [[ $(echo "$RES" | jq -r '.email') != "no@spam.please" ]]; then
      echo "Could not get user info"
      exit 1
    fi
    echo "Got user info"


}

footest () {
    docker_setup
    login "$API"
    curl -v \
         -H "X-Token: $TOKEN" \
         -H "X-Instance: $INSTANCE" \
         http://$API/foo/index.html

}


docker_rebuild() {
    set -e
    docker-compose stop
    docker-compose rm -f
    docker-compose build
    docker-compose up
}

case $1 in
    dockertest)
        docker_test
        ;;
    docker)
        docker_rebuild
        ;;
    login)
        login $DOCKER_HOST
        ;;
    nginx_rebuild_conf)
        nginx_build_conf
        ;;
    nginx_logs)
        nginx_logs
        ;;
    nginx_enter)
        enter_nginx
        ;;
    foo)
        footest
        ;;
    *)
        echo "usage: test.sh dockertest|docker|login|nginx_rebuild_conf|nginx_logs|nginx_enter"
        exit 1
        ;;
esac
