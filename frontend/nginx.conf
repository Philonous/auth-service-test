worker_processes 1;
events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;

    # avoid the need of a dns server
    upstream authserver{
        server auth-service;
    }

    server {
        listen 80;
        server_name auth-service;
        rewrite_log on;
        root /www/;
        index index.html;
        location / {
        }
        location = /authenticate.html {
            # Serve authenticate.html instead of a 404 page when auth fails
            error_page 403 =200 /authenticatehtml;
            auth_request /auth;
            # `try_files' only fires after authentication and allows us to use
            # another location if none are found. You can replace @toroot with
            # /, but then it will serve the data from there rather than
            # redirecting
            # We have to do this because both `rewrite' and `return' will
            # short-circuit the authentication request
            try_files nonexistent @toroot;
            # Can use alias to serve a static file instead (will work correctly)
            # alias /www/skip.html;
        }
        # Auxiliary location to redirect to / in case of success
        location @toroot {
            return 303 /;
        }
        # Auciliary location to serve the authenticate.html file
        location = /authenticatehtml {
            internal;
            alias /www/authenticate.html;
        }
        location = /auth {
            internal;
            set $token $cookie_token;
            if ($token = '') {
              set $token $http_x_token;
            }
            if ($token = '') {
              return 403;
            }
            proxy_pass http://authserver/check-token/$token/;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
        }

    }
}
